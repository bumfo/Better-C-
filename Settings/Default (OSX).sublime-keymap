[{
      "keys": ["enter"],
      // "command": "insert_snippet", "args": {"contents": " \\\n$0"}, 
      "command": "insert", "args": {"characters": " \\\n"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "not_regex_contains", "operand": "\\\\$|\\s$", "match_all": true },
        { "key": "following_text", "operator": "not_regex_match", "operand": "^$", "match_all": true }
      ]
    },
{
      "keys": ["enter"],
      "command": "insert", "args": {"characters": "\\\n"}, 
      // "command": "insert_snippet", "args": {"contents": "\\\n$0"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        // { "key": "preceding_text", "operator": "not_regex_contains", "operand": "\\\\$", "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "\\s$", "match_all": true },
        { "key": "following_text", "operator": "not_regex_match", "operand": "^$", "match_all": true }
      ]
    },

{
      "keys": ["enter"],
      "command": "insert_snippet", "args": {"contents": " \\\n$0 "}, 
      // "command": "insert", "args": {"characters": " \\\n"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "not_regex_contains", "operand": "\\\\$|\\s$", "match_all": true },
        { "key": "following_text", "operator": "regex_match", "operand": "^\\\\$", "match_all": true },
      ]
    },
{
      "keys": ["enter"],
      // "command": "insert", "args": {"characters": "\\\n"}, 
      "command": "insert_snippet", "args": {"contents": "\\\n$0 "}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        // { "key": "preceding_text", "operator": "not_regex_contains", "operand": "\\\\$", "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "\\s$", "match_all": true },
        { "key": "following_text", "operator": "regex_match", "operand": "^\\\\$", "match_all": true },
      ]
    },






// {
//       "keys": ["enter"],
//       // "command": "auto_indent_tag_inline",
//       "command": "insert", "args": {"characters": "\\\n"}, 
//       // "command": "insert_snippet", "args": {"contents": "\\\n$0"}, 
//       "context": [{
//           "key": "selector",
//           "operator": "equal",
//           "operand": "source.c99 meta.inline.c"
//         },
//         { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
//         { "key": "preceding_text", "operator": "regex_match", "operand": "^\\s*$", "match_all": true },
//         { "key": "following_text", "operator": "not_regex_match", "operand": "^$", "match_all": true }
//       ]
//     },
{
      "keys": ["enter"],
      "command": "insert_snippet", "args": {"contents": "\n$0\\"}, 
      // "command": "insert_snippet", "args": {"name": "Packages/Better C++/Snippets/inline-enter-escape.sublime-snippet"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c meta.block.inline.c, source.c99 meta.inline.c meta.group.inline.c, source.c99 meta.inline.c meta.subscriptor.inline.c, source.c99 meta.inline.c comment.block.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\$", "match_all": true },
        // { "key": "following_text", "operator": "not_regex_match", "operand": "$", "match_all": true }
      ]
    },





{
      "keys": ["enter"],
      // "command": "insert_snippet", "args": {"contents": " \\\n\t$0"}, 
      "command": "insert", "args": {"characters": " \\\n\t"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "{$", "match_all": true },
      ]
    },
{
      "keys": ["enter"],
      // "command": "insert_snippet", "args": {"contents": "\\\n\t$0"}, 
      "command": "insert", "args": {"characters": " \\\n\t"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "{\\s+$", "match_all": true },
      ]
    },


{
      "keys": ["enter"],
      "command": "insert_snippet", "args": {"contents": " \\\n\t$0 "}, 
      // "command": "insert", "args": {"characters": " \\\n\t"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "{$", "match_all": true },
        { "key": "following_text", "operator": "regex_match", "operand": "^\\\\$", "match_all": true },
      ]
    },
{
      "keys": ["enter"],
      "command": "insert_snippet", "args": {"contents": "\\\n\t$0 "}, 
      // "command": "insert", "args": {"characters": " \\\n\t"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "{\\s+$", "match_all": true },
        { "key": "following_text", "operator": "regex_match", "operand": "^\\\\$", "match_all": true },
      ]
    },


{
      "keys": ["enter"],
      "command": "insert_snippet", "args": {"contents": "\n\t$0 \\"}, 
      "context": [{
          "key": "selector",
          "operator": "equal",
          "operand": "source.c99 meta.inline.c"
        },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{\\s*\\\\$", "match_all": true },
      ]
    },
{
    "keys": ["enter"],
    "command": "insert_snippet", "args": {"contents": " \\\n\t$0 \\\n"}, 
    "context": [{
        "key": "selector",
        "operator": "equal",
        "operand": "source.c99 meta.inline.c"
      },
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },






// Auto-pair curly brackets
{
    "keys": ["{"], 
    "command": "insert_snippet", "args": {"contents": "{$0}"}, 
    "context": [{
        "key": "selector",
        "operator": "equal",
        "operand": "source.c99 meta.inline.c"
      },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\$", "match_all": true }
    ]
  },
// Auto-pair square brackets
{
    "keys": ["["], 
    "command": "insert_snippet", "args": {"contents": "[$0]"}, 
    "context": [{
        "key": "selector",
        "operator": "equal",
        "operand": "source.c99 meta.inline.c"
      },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\$", "match_all": true }
    ]
  },
// Auto-pair brackets
{
    "keys": ["("],
    "command": "insert_snippet", "args": {"contents": "($0)"},
    "context": [{
        "key": "selector",
        "operator": "equal",
        "operand": "source.c99 meta.inline.c"
      },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\$", "match_all": true }
    ]
  },
// Auto-pair single quotes
{
    "keys": ["'"], 
    "command": "insert_snippet", "args": {"contents": "'$0'"}, 
    "context": [{
        "key": "selector",
        "operator": "equal",
        "operand": "source.c99 meta.inline.c"
      },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\$", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
    ]
  },
// Auto-pair quotes
{
    "keys": ["\""],
    "command": "insert_snippet", "args": {"contents": "\"$0\""},
    "context":[{
        "key": "selector",
        "operator": "equal",
        "operand": "source.c99 meta.inline.c"
      },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\\\$", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true }
    ]
  },
]
