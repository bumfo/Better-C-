%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C Better
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c99

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  basic_types: 'bool|char|double|float|int|long|short|void'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|return|switch|while'
  storage_classes: 'static|extern|register'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  type_modifiers: 'unsigned|signed'

contexts:
  main:
    - include: global-context

  global-context:
    - include: typedef
    - include: declaration-global
    - include: statement-context

  statement-context:
    - scope: keyword.control.c
      match: '\b({{control_keywords}})\b'
    - scope: punctuation.terminator.c
      match: ';'
    - scope: punctuation.definition.block.begin.c
      match: '\{'
      push:
        - scope: punctuation.definition.block.end.c
          match: '\}'
          pop: true
        - include: statement-context
    - include: typedef
    - include: declaration
    - include: expression-context

  typedef:
    - scope: keyword.typedef.c
      match: '\btypedef\b'
      push: type-context

  declaration:
    - scope: storage.modifier.c
      match: '\b({{modifiers}})\b'
      push: type-context
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      push: struct-lookahead-context
    - scope: storage.type.modifier.c
      match: '\b({{type_modifiers}})\b'
      push: after-type-context
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      push: after-type-context

  declaration-global:
    - scope: storage.modifier.c
      match: '\b({{modifiers}})\b'
      push: type-context-global
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      push: struct-lookahead-context-global
    - scope: storage.type.modifier.c
      match: '\b({{type_modifiers}})\b'
      push: after-type-context-global
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      push: after-type-context-global
    - match: '(?={{identifier}})'
      push: type-context-global

  type-context-common:
    - include: comments
    - scope: storage.modifier.c
      match: '\b({{modifiers}})\b'

  type-context:
    - meta_content_scope: meta.type-context
    - include: type-context-common
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      set: struct-lookahead-context
    - scope: storage.type.modifier.c
      match: '\b({{type_modifiers}})\b'
      set: after-type-context
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      set: after-type-context
    - scope: meta.any-type.c
      match: '{{identifier}}'
      set: after-type-context
    - match: (?=\S)
      pop: true

  type-context-global:
    - meta_content_scope: meta.type-context-global
    - include: type-context-common
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      set: struct-lookahead-context-global
    - scope: storage.type.modifier.c
      match: '\b({{type_modifiers}})\b'
      set: after-type-context-global
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      set: after-type-context-global
    - scope: meta.any-type.c
      match: '{{identifier}}'
      set: after-type-context-global
    - match: (?=\S)
      pop: true

  type-context-param:
    - meta_content_scope: meta.type-context-param
    - include: type-context-common
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      set:
        - scope: meta.struct-name.c
          match: '{{identifier}}'
          set: after-type-context-param
        - match: '(?=\S)'
          pop: true
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      set: after-type-context-param
    - scope: meta.any-type.c
      match: '{{identifier}}'
      set: after-type-context-param
    - match: (?=\S)
      pop: true

  expression-context:
    - include: comments
    - scope: keyword.operator.c
      match: '[+\-*/%!&|\^=<>]'
    - scope: punctuation.definition.group.begin.c
      match: '\('
      push:
        - scope: punctuation.definition.group.end.c
          match: '\)'
          set: after-expr-context
        - include: expression-context
    - scope: punctuation.initializer.begin.c
      match: '\{'
      push:
        - scope: punctuation.initializer.end.c
          match: '\}'
        - include: expression-context
    - scope: punctuation.separator.c
      match: ','
    - scope: meta.identifier-lookahead
      match: '(?={{identifier}})'
      push: identifier-context
    - include: strings
    - include: numbers

  struct-lookahead-context:
    - meta_content_scope: meta.struct-lookahead-context
    - scope: entity.name.struct.forward-decl.c
      match: '{{identifier}}(?=\s*;)'
      pop: true
    - scope: entity.name.struct.c
      match: '{{identifier}}(?=\s*\{)'
      pop: true
    - scope: meta.struct-name.c
      match: '{{identifier}}'
      set: after-type-context
    - match: (?=\S)
      pop: true

  struct-lookahead-context-global:
    - meta_content_scope: meta.struct-lookahead-context
    - scope: entity.name.struct.forward-decl.c
      match: '{{identifier}}(?=\s*;)'
      pop: true
    - scope: entity.name.struct.c
      match: '{{identifier}}(?=\s*\{)'
      pop: true
    - scope: meta.struct-name.c
      match: '{{identifier}}'
      set: after-type-context-global
    - match: (?=\S)
      pop: true

  identifier-context:
    - meta_content_scope: meta.identifier-context
    - include: comments
    - scope: variable.function.c
      match: '{{identifier}}(?=\s*\()'
      set: after-expr-context
    - scope: meta.identifier.c
      match: '{{identifier}}'
      set: after-expr-context

  declexpr-context-common:
    - include: comments
    - scope: storage.type.pointer.c
      match: '[*]'
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
    - scope: storage.modifier.c
      match: '\b({{modifiers}})\b'
    - scope: storage.type.modifier.c
      match: '\b({{type_modifiers}})\b'

  declexpr-context:
    - meta_content_scope: meta.declexpr-context
    - include: declexpr-context-common
    - scope: punctuation.parenthesis.begin.c
      match: '\('
      push: declexpr-parenthesis-context

  declexpr-context-global:
    - meta_content_scope: meta.declexpr-context-global
    - include: declexpr-context-common
    - scope: punctuation.parenthesis.begin.c
      match: '\('
      push: declexpr-parenthesis-context-global

  declexpr-context-param:
    - meta_content_scope: meta.declexpr-context-param
    - include: declexpr-context-common
    - scope: punctuation.parenthesis.begin.c
      match: '\('
      push: declexpr-parenthesis-context-param

  after-type-context:
    - meta_content_scope: meta.after-type-context
    - include: declexpr-context
    - scope: entity.name.variable.c
      match: '{{identifier}}'
      set: after-declexpr-context
    - match: (?=\S)
      pop: true
  
  after-type-context-global:
    - meta_content_scope: meta.after-type-context-global
    - include: declexpr-context-global
    - scope: entity.name.function.c
      match: '{{identifier}}(?=\s*\()'
      set: after-declexpr-context
    - scope: entity.name.variable.c
      match: '{{identifier}}'
      set: after-declexpr-context
    - match: (?=\S)
      pop: true

  after-type-context-param:
    - meta_content_scope: meta.after-type-context-param
    - include: declexpr-context-param
    - scope: variable.parameter.c
      match: '{{identifier}}'
      set: after-declexpr-context
    - match: (?=\S)
      pop: true

  declexpr-parenthesis-context:
    - meta_content_scope: meta.declexpr-parenthesis-context
    - include: comments
    - include: declexpr-context
    - scope: entity.name.variable.c
      match: '{{identifier}}'
      push: after-declexpr-context
    - scope: punctuation.parenthesis.end.c
      match: '\)'
      set: after-declexpr-context-fake

  declexpr-parenthesis-context-global:
    - meta_content_scope: meta.declexpr-parenthesis-context-global
    - include: comments
    - include: declexpr-context-global
    - scope: entity.name.function.c
      match: '{{identifier}}(?=\s*\()'
      push: after-declexpr-context
    - scope: entity.name.variable.c
      match: '{{identifier}}'
      push: after-declexpr-context
    - scope: punctuation.parenthesis.end.c
      match: '\)'
      set: after-declexpr-context-fake

  declexpr-parenthesis-context-param:
    - meta_content_scope: meta.declexpr-parenthesis-context-param
    - include: comments
    - include: declexpr-context-param
    - scope: variable.parameter.c
      match: '{{identifier}}'
      push: after-declexpr-context
    - scope: punctuation.parenthesis.end.c
      match: '\)'
      set: after-declexpr-context-fake

  after-declexpr-context:
    - meta_content_scope: meta.after-declexpr-context
    - include: comments
    - match: '(?<=\))'
      set: after-declexpr-context-fake
    - scope: punctuation.subscriptor.begin.c
      match: '\['
      push: subscriptor-context
    - scope: punctuation.group.param.begin.c
      match: '\('
      push: param-group-context
    - match: '(?=\S)'
      pop: true

  after-declexpr-context-fake:
    - meta_content_scope: meta.after-declexpr-context-fake
    - include: comments
    - scope: punctuation.subscriptor.begin.c
      match: '\['
      push: subscriptor-context
    - scope: punctuation.group.param.begin.c
      match: '\('
      push: param-group-context-fake
    - match: '(?=\S)'
      pop: true

  param-group-context:
    - meta_content_scope: meta.param-group-context
    - include: comments
    - scope: punctuation.group.param.end.c
      match: '\)'
      pop: true
    - scope: punctuation.separator.c
      match: ','
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      push:
        - scope: meta.struct-name.c
          match: '{{identifier}}'
          set: after-type-context-param
        - match: '(?=\S)'
          pop: true
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      push: after-type-context-param
    - scope: storage.modifier.c
      match: '\b({{modifiers}})\b'
      push: type-context-param
    - scope: meta.any-type.c
      match: '{{identifier}}'
      push: after-type-context-param

  param-group-context-fake:
    - meta_content_scope: meta.param-group-context-fake
    - include: comments
    - scope: punctuation.group.param.end.c
      match: '\)'
      pop: true
    - scope: punctuation.separator.c
      match: ','
    - scope: storage.type.struct.c
      match: '\bstruct\b'
      push:
        - scope: meta.struct-name.c
          match: '{{identifier}}'
          set: after-type-context
        - match: '(?=\S)'
          pop: true
    - scope: storage.type.c
      match: '\b({{basic_types}})\b'
      push: after-type-context
    - scope: storage.modifier.c
      match: '\b({{modifiers}})\b'
      push: type-context
    - scope: meta.any-type.c
      match: '{{identifier}}'
      push: after-type-context

  after-expr-context:
    - meta_content_scope: meta.after-expr-context
    - include: comments
    - scope: punctuation.subscriptor.begin.c
      match: '\['
      push: subscriptor-context
    - scope: punctuation.arguments.begin.c
      match: '\('
      push: arguments-context
    - match: '(?=\S)'
      pop: true

  arguments-context:
    - scope: punctuation.arguments.end.c
      match: '\)'
      pop: true
    - include: expression-context

  subscriptor-context:
    - scope: punctuation.subscriptor.end.c
      match: '\]'
      pop: true
    - include: expression-context

  strings:
    - include: scope:source.c#strings

  numbers:
    - include: scope:source.c#numbers
  
  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE)\b
      scope: constant.language.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.c
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.c

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: \n
          pop: true
