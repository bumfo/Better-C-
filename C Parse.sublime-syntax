%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C Parse
file_extensions:
  - c
  - h
first_line_match: '-[*]-( Mode:)? C -[*]-'
scope: source.c1x

variables:
  _basic_types: 'void|signed|unsigned|char|short|int|long|float|double|signed|unsigned|_Bool|_Complex|_Imaginary'
  _aggregate_types: 'struct|union|enum'

  _storage_classes: 'static|extern|auto|register|_Thread_local'
  _type_qualifiers: 'const|restrict|volatile|_Atomic'
  _compiler_directives: 'inline|__restrict__|__restrict|_Noreturn'
  _type_modifiers: '{{_storage_classes}}|{{_type_qualifiers}}|{{_compiler_directives}}'

  _control_keywords: 'return|if|else|switch|case|default|goto|for|do|while|break|continue'

  _word_operators: 'sizeof'

  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'

  type_modifier: '\b(?:{{_type_modifiers}})\b'
  type_basic: '\b(?:{{_basic_types}})\b'
  struct_like: '\b(?:struct|union)\b'

contexts:
  prototype:
    - include: comments

  main:
    - include: global


  global:
    - include: preprocessors
    - include: test_declar
    # - include: fallback

  test_declar:
    - match: '(?={{type_modifier}})'
      push: [test_declar_scope_context_modifier_start, type_basic_and_aggregate_context, type_modifier_context]
    - match: '(?={{type_basic}}|{{struct_like}})'
      push: [test_declar_scope_context_type_start, type_basic_and_aggregate_context]

  # test_declar_scope_context:
  #   - meta_scope: invalid.illegal.identifier.test_declar
  #   - include: fallpop

  test_declar_scope_context_modifier_start:
    - meta_scope: invalid.illegal.identifier.test_declar_modifier
    - include: fallpop

  test_declar_scope_context_type_start:
    - meta_scope: invalid.illegal.identifier.test_declar_type
    - include: fallpop

  type_modifier_context:
    # - meta_scope: invalid.illegal.identifier.type_modifier_context
    - include: type_modifiers
    - include: fallpop

  # type_basic_and_aggregate:
  #   - match: '(?={{type_basic}})'
  #     push: 
  #       - meta_scope: invalid.illegal.identifier
  #       - include: basic_types
  #       - include: fallpop
  #   - include: test_struct_like

  type_basic_and_aggregate_context:
    # - meta_scope: invalid.illegal.identifier.type_basic_and_aggregate_context
    - include: type_basic_fragment
    - include: test_struct_like_fragment
    - include: fallpop

  type_basic_context:
    - include: type_basic_fragment
    - include: fallpop

  type_basic_fragment:
    - match: '(?={{type_basic}})'
      set: [modifiers_after_type_basic_context, type_basic_fragment_content]

  type_basic_fragment_content:
    # - meta_scope: invalid.illegal.identifier.type_basic_fragment
    - include: basic_types
    - include: fallpop

  modifiers_after_type_basic_context:
    - match: '(?=\b(?:{{_type_qualifiers}}|{{_compiler_directives}}|{{_type_modifiers}})\b)'
      set: [type_basic_context, type_modifier_context]
    - include: fallpop

  # test_struct_like:
  #   - match: '(?={{struct_like}})'
  #     push: test_struct_like_keyword

  test_struct_like_fragment:
    # - meta_scope: invalid.illegal.identifier.test_struct_like_fragment
    - match: '(?={{struct_like}})'
      set: [type_modifier_context, test_struct_like_keyword]

  test_struct_like_keyword:
    - scope: storage.type.struct
      match: '\b(?:struct)\b'
      set: test_struct_like_after_keyword
    - scope: storage.type.union
      match: '\b(?:union)\b'
      set: test_struct_like_after_keyword
    - include: fallpop

  test_struct_like_after_keyword:
    - scope: invalid.illegal.identifier
      match: '{{identifier}}'
      set: test_struct_like_after_tag
    - include: test_struct_like_after_tag

  test_struct_like_after_tag:
    - match: '(?=\{)'
      set: [test_struct_like_block_end, test_struct_like_block_content, test_struct_like_block_start]
    - include: fallpop

  test_struct_like_block_start:
    - match: '\{'
      pop: true

  test_struct_like_block_end:
    - match: '\}'
      pop: true

  test_struct_like_block_content:
    - include: fallpop

  fallback:
    - include: basic_types
    - include: aggregate_types

    - scope: keyword.typedef
      match: '\b(?:typedef)\b'

    - include: type_modifiers

    - scope: keyword.control
      match: '\b(?:{{_control_keywords}})\b'

    - scope: keyword.operator.word
      match: '\b(?:{{_word_operators}})\b'

    - include: strings
    - include: numbers
    - include: constants
    
    - scope: punctuation.section
      match: '[\(\)\[\]\{\}]'
    - scope: punctuation.accessor
      match: '\.|\->'
    - scope: punctuation.delimiter
      match: ','
    - scope: punctuation.terminator
      match: ';'
    - scope: keyword.operator
      match: '[\+\-\*\/\%\^\&\|\~\=\<\>\!]'

  basic_types:
    - scope: storage.type.c
      match: '{{type_basic}}'

  aggregate_types:
    - scope: storage.type.aggregate.c
      match: '\b(?:{{_aggregate_types}})\b'

  type_modifiers:
    - scope: storage.modifier.storage.c
      match: '\b(?:{{_storage_classes}})\b'
    - scope: storage.modifier.qualifier.c
      match: '\b(?:{{_type_qualifiers}})\b'
    - scope: storage.modifier.directive.c
      match: '\b(?:{{_compiler_directives}})\b'

  strings:
    - include: scope:source.c11#strings

  numbers:
    - include: scope:source.c11#numbers

  constants:
    - include: scope:source.c11#constants

  preprocessors:
    - include: scope:source.c11#preprocessors

  comments:
    - include: scope:source.c11#comments



  fallpop:
    - match: '(?=\S)'
      pop: true
