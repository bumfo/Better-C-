%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C++11
comment: I don't think anyone uses .hp. .cp tends to be paired with .h. (I could be wrong. :) -- chris
file_extensions:
  - cpp
  - cc
  - cp
  - cxx
  - c++
  - C
  - h
  - hh
  - hpp
  - hxx
  - h++
  - inl
  - ipp
first_line_match: '-\*- C\+\+ -\*-'
scope: source.c++11

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  path_lookahead: '(::\s*)?({{identifier}}\s*::\s*)*{{identifier}}'
  macro_identifier: '\b[[:upper:]_][[:upper:][:digit:]_]*\b'
  operator_method_name: '\boperator\s*(?:[-+*/%Ë†&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\|\||\+\+|--|,|->\*?|\(\)|\[\])'
  casts: 'const_cast|dynamic_cast|reinterpret_cast|static_cast'
  operator_keywords: 'and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq|noexcept'
  control_keywords: 'break|case|catch|continue|default|do|else|for|goto|if|_Pragma|return|switch|throw|try|while'
  memory_operators: 'new|delete'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum\s+class|enum\s+struct|enum|class'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|export|extern|friend|explicit|virtual|register|thread_local'
  type_qualifier: 'const|constexpr|mutable|typename|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  visibility_modifiers: 'private|protected|public'
  other_keywords: 'typedef|decltype|nullptr|operator|{{visibility_modifiers}}|static_assert|sizeof|using|typeid|alignof|alignas|namespace|template'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_angle_brackets: '(?=<<|<=)'
  generic_lookahead: '<\s*{{path_lookahead}}(?:{{path_lookahead}}|&(?!&)|\*|,|<.*?>|\s|\d)*>'
  data_structures_forward_decl_lookahead: '(\s+{{macro_identifier}})*\s*(:\s*({{path_lookahead}}|{{visibility_modifiers}}|,|\s|<[^;]*>)+)?;'
  # match_types: '(?:{{identifier}}::)*\b({{identifier}})\b({{generic_lookahead}})?(?=(\s*\*+ *| +)(\(\s*\*\s*)?{{identifier}})'
  match_types2: '{{path_lookahead}}({{generic_lookahead}})?(?:\s*\*+ *| +)(?:\(\s*\*\s*)?{{identifier}}'
  match_types3: '(?=(?:\s*\*+ *| +)(?:\(\s*\*\s*)?{{identifier}})'

contexts:
  main:
    - include: global

  global:
    - include: namespace
    - include: statement

  statement:
    - match: '\bfor\b'
      scope: keyword.control.for.c++
      push: for-group
    - match: '{{modifiers}}'
      scope: keyword.modifiers.c++
    - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
      push: data-structures
    - match: \breturn\b
      scope: keyword.control.return.c++
      push: expr
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c++
    - match: \bnew\b
      scope: keyword.new.c++
      push: expr
    - include: variable-declaration
    - include: preprocessor
    - include: comments
    - include: block
    - include: expression-top
    - match: ';'
      scope: punctuation.terminator.c++

  expression:
    - match: \bnew\b
      scope: keyword.new.c++
      push: expr
    - include: operators
    - include: group
    - include: numbers
    - include: string
    - match: \b({{basic_types}})\b
      scope: storage.type.c++
    - match: ','
      scope: punctuation.separator.c++
    - include: identifier-match
    - include: subscriptor
    - include: initializer-list

  argument-list:
    - match: '\('
      scope: punctuation.arguments.begin.c++
      push:
        - match: '\)'
          scope: punctuation.arguments.end.c++
          pop: true
        - match: ','
          scope: punctuation.separator.c++
        - include: expression

  initializer-list:
    - match: '\{'
      scope: punctuation.initializer.begin.c++
      push:
        - match: '\}'
          scope: punctuation.initializer.end.c++
          pop: true
        - match: ','
          scope: punctuation.separator.c++
        - include: expression

  subscriptor:
    - match: '\['
      scope: punctuation.subscriptor.begin.c++
      push:
        - include: expression
        - match: '\]'
          scope: punctuation.subscriptor.end.c++
          pop: true

  identifier-match:
    - match: '::'
      scope: punctuation
    - match: '({{identifier}})(?={{generic_lookahead}}\s*\()'
      captures: 
        1: variable.function.c++
      push:
        - include: generic-type
        - match: '(?<=\))'
          pop: true
        - include: argument-list
    - match: '({{identifier}})(?={{generic_lookahead}})'
      push: 
        - match: '(?<=\>)'
          pop: true
        - include: generic-type
    - match: '({{identifier}})(?=\s*\()'
      scope: variable.function.c++
      push:
        - match: '(?<=\))'
          pop: true
        - include: argument-list
    - match: '({{identifier}})(?=\s*\{)'
      scope: variable.function.constructor.c++ # storage.type.any.c++
      push:
        - match: '(?<=\})'
          pop: true
        - include: initializer-list
    - match: '({{identifier}})'
      scope: variable.other.c++
      push:
        - match: '(?=[+\-*/%\^&=<>?:\.\|}\]\)])'
          pop: true
        - match: '(?=;|,)'
          pop: true
        - include: argument-list
        - include: initializer-list
        - include: subscriptor

  
  assign-initializer:
    - match: '\='
      scope: punctuation.initializer.c++
      push: 
        - match: '(?=;|,|\)|\})'
          pop: true
        - match: '\{'
          scope: punctuation.initializer.begin.c++
          set:
            - match: '\}'
              scope: punctuation.initializer.end.c++
              pop: true
            - match: ','
              scope: punctuation.separator.c++
            - include: expression
        - include: expression

  initializer:
    - include: assign-initializer
    # - match: '='
    #   scope: punctuation.initializer.c++
    #   set:
    #     - match: (?=;|,)
    #       pop: true
    #     - include: expression
    - match: '\('
      scope: punctuation.initializer.begin.c++
      set:
        - match: '\)'
          scope: punctuation.initializer.end.c++
          pop: true
        - match: ','
          scope: punctuation.separator.c++
        - include: expression
    - match: '\{'
      scope: punctuation.initializer.begin.c++
      set:
        - match: '\}'
          scope: punctuation.initializer.end.c++
          pop: true
        - match: ','
          scope: punctuation.separator.c++
        - include: expression

  variable-declaration:
    - include: early-variable-declaration

  any-type:
    - match: '\*'
      scope: storage.type.pointer.c++
    - match: '\b{{basic_types}}\b'
      scope: storage.type.c++
    - match: '({{identifier}})(::)'
      captures:
        1: meta.identifier.c++
        2: punctuation.other.c++
    - match: '({{identifier}})'
      captures:
        1: meta.storage.type.any.c++
    - include: generic-type

  generic-type:
    - match: '\<'
      scope: punctuation.template.begin.c++
      push:
        - include: any-type
        - match: '\>'
          scope: punctuation.template.end.c++
          pop: true

  early-variable-declaration:
    - match: \b({{basic_types}})\b
      captures: 
        1: storage.type.c++
      push: late-variable-declaration
    - match: '(?={{match_types2}})'
      push: 
        - include: any-type
        - match: '{{match_types3}}'
          set: late-variable-declaration

  function-like:
    - match: '({{identifier}})(?=\s*\(\s*(?:\)|\b{{basic_types}}\b|{{match_types2}}))'
      captures:
        1: entity.name.function.c++
      push:
        - match: ':'
          scope: punctuation
          push:
            - match: ','
              scope: punctuation.separator.c++
            - include: argument-list
            - match: (?=\{)
              pop: true
        - match: '(?=\}|\{|;|,)'
          pop: true
        - include: parameter-group

  late-variable-declaration:
    - match: '(?=\)|\}|\{|;)'
      pop: true
    - match: ','
      scope: punctuation.separator.c++
    - include: function-like
    - match: '({{identifier}})'
      scope: variable.declaration.c++
      push:
        - include: subscriptor
        - include: initializer
        - match: '(?=\{|;|\}|\))'
          pop: true
        - match: ','
          scope: punctuation.separator.c++
          pop: true
    - include: complex-declaration
    - match: '\*'
      scope: storage.type.pointer.c++
    # - match: (?={)
    #   pop: true
    - match: (?=;)
      pop: true

  block:
    - match: \{
      scope: punctuation.definition.block.begin.c++
      push:
        - include: statement
        - match: \}
          scope: punctuation.definition.block.end.c++
          pop: true

  group:
    - match: \(
      scope: punctuation.definition.group.begin.c++
      push:
        - match: \)
          scope: punctuation.definition.group.end.c++
          pop: true
        - include: expression

  for-group:
    - match: \(
      scope: punctuation.definition.group.begin.c++
      set:
        - include: variable-declaration
        - match: ';'
          scope: punctuation.terminator.c++
        - match: \)
          scope: punctuation.definition.group.end.c++
          pop: true
        - include: expression

  numbers:
    - include: scope:source.c++#numbers

  string:
    - include: scope:source.c++#strings

  # string:
  #   - match: '"'
  #     scope: punctuation.definition.string.begin.c++
  #     push:
  #       - meta_scope: string.quoted.double.c++
  #       - match: \\.
  #         scope: constant.character.escape.c++
  #       - match: '"'
  #         scope: punctuation.definition.string.begin.c++
  #         pop: true
  #   - match: "'"
  #     scope: punctuation.definition.string.begin.c++
  #     push:
  #       - meta_scope: string.quoted.single.c++
  #       - match: \\.
  #         scope: constant.character.escape.c++
  #       - match: "'"
  #         scope: punctuation.definition.string.begin.c++
  #         pop: true

  plain-group:
    - match: '\('
      push: 
        - include: plain-group
        - match: '\)'
          pop: true

  parameter-group-fake:
    - match: '\('
      scope: punctuation.definition.parameters.begin.c++
      push: 
        - meta_content_scope: meta.definition.parameters.c++
        - match: ','
          scope: punctuation.separator.c++
        - match: \b({{basic_types}})\b
          scope: storage.type.c++
        - match: '(?={{match_types2}})'
          push: 
            - match: '{{match_types3}}'
              pop: true
            - include: any-type
        - match: '\*'
          scope: storage.type.pointer.c++
        - match: '\)'
          scope: punctuation.definition.parameters.end.c++
          pop: true
        - include: complex-declaration-fake
        - match: '({{identifier}})(?=\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c++ comment.parameter.c++
            2: variable.parameter.c++ comment.parameter.c++
          push: 
            - match: (?=\)|\{|=|;|,)
              pop: true
            - include: parameter-group-fake

  parameter-group:
    - match: '\('
      scope: punctuation.definition.parameters.begin.c++
      push: 
        - meta_content_scope: meta.definition.parameters.c++
        - match: ','
          scope: punctuation.separator.c++
        - match: \b({{basic_types}})\b
          scope: storage.type.c++
        - match: '(?={{match_types2}})'
          push: 
            - match: '{{match_types3}}'
              pop: true
            - include: any-type
        - match: '\*'
          scope: storage.type.pointer.c++
        - match: '\)'
          scope: punctuation.definition.parameters.end.c++
          pop: true
        - include: complex-declaration-parameter
        - match: '({{identifier}})(?=\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c++
            2: variable.parameter.c++
          push: 
            - include: assign-initializer
            - include: subscriptor
            - match: (?=\)|\{|=|;|,)
              pop: true
            - include: parameter-group-fake

  complex-declaration-fake:
    - match: '\('
      scope: punctuation.declaration.group.begin.c++
      push: 
        - match: '\*'
          scope: storage.type.pointer.c++
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c++ comment.parameter.c++
            2: variable.parameter.c++ comment.parameter.c++
        - match: '\)'
          scope: punctuation.declaration.group.end.c++
          set: 
            - match: (?=\}|\)|\{|=|;|,)
              pop: true
            - include: subscriptor
            - include: parameter-group-fake


  complex-declaration:
    - match: '\('
      scope: punctuation.declaration.group.begin.c++
      push: 
        - match: '\*'
          scope: storage.type.pointer.c++
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.declaration.c++
            2: variable.declaration.c++
        - match: '\)'
          scope: punctuation.declaration.group.end.c++
          set: 
            - include: assign-initializer
            - match: (?=\}|\)|\{|=|;|,)
              pop: true
            - include: subscriptor
            - include: parameter-group-fake

  complex-declaration-parameter:
    - match: '\('
      scope: punctuation.declaration.group.begin.c++
      push: 
        - match: '\*'
          scope: storage.type.pointer.c++
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c++
            2: variable.parameter.c++
        - match: '\)'
          scope: punctuation.declaration.group.end.c++
          set: 
            - include: assign-initializer
            - match: (?=\)|\{|=|;|,)
              pop: true
            - include: subscriptor
            - include: parameter-group-fake

  preprocessor:
    - include: scope:source.c99#preprocessor

  comments:
    - include: scope:source.c99#comments

  operators:
    - include: scope:source.c99#operators



  namespace:
    - match: '\b(using)\s+(namespace)\s+(?={{path_lookahead}})'
      captures:
        1: keyword.control.c++
        2: keyword.control.c++
      push:
        - include: identifiers
        - match: ''
          pop: true
    - match: '\b(namespace)\s+(?=({{path_lookahead}})?(?!\s*[;,]))'
      scope: meta.namespace.c++
      captures:
        1: keyword.control.c++
      push:
        - meta_content_scope: meta.namespace.c++ entity.name.namespace.c++
        - include: identifiers
        - match: ''
          set:
            - meta_scope: meta.namespace.c++
            - include: comments
            - match: '='
              scope: keyword.operator.alias.c++
            - match: '(?=;)'
              pop: true
            - match: '\}'
              scope: meta.block.c++ punctuation.definition.block.end.c++
              pop: true
            - match: '\{'
              scope: punctuation.definition.block.begin.c++
              push:
                - meta_scope: meta.block.c++
                - match: '(?=\})'
                  pop: true
                - include: preprocessor-global
                - include: global

  expr:
    # - meta_content_scope: meta.expr.c++
    - match: '->'
      scope: punctuation.accessor.c
    - match: '\.'
      scope: punctuation.accessor.c
    - match: '(?=[;\>\]\)\}])'
      pop: true
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
      set: expr
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
      set: expr
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
      set: expr
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
      set: expr
    - match: \=
      scope: keyword.operator.assignment.c
      set: expr
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
      set: expr

    - include: expression

  expression-top:
    - match: '->'
      scope: punctuation.accessor.c
    - match: '\.'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
      push: expr
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
      push: expr
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
      push: expr
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
      push: expr
    - match: \=
      scope: keyword.operator.assignment.c
      push: expr
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
      push: expr

    - include: expression

  ## Data structures including classes, structs, unions and enums

  data-structures:
    - match: '\bclass\b'
      scope: storage.type.c++
      set: data-structures-class-definition
    - match: '\bstruct\b'
      scope: storage.type.c++
      set: data-structures-struct-definition
    - match: '(?=\S)'
      pop: true

  data-structures-common-definition:
    - match: '\{'
      scope: punctuation.definition.class.c++
      push:
        - match: \b({{visibility_modifiers}})\s*(:)(?!:)
          captures:
            1: storage.modifier.c++
            2: punctuation.section.class.c++
        - match: ';'
          scope: punctuation.terminator.c++
        - include: block
        - include: comments
        - include: function-like
        - include: variable-declaration
        - match: '\}'
          scope: punctuation.definition.class.c++
          pop: true

  data-structures-class-definition:
    - meta_scope: meta.class.c++
    - match: '{{identifier}}'
      scope: entity.name.class.c++
    - include: data-structures-common-definition
    - match: '(?=;)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.c++
    - match: '{{identifier}}'
      scope: entity.name.struct.c++
    - include: data-structures-common-definition
    - match: '(?=;)'
      pop: true
