%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C Next
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c11

variables:
  c90_keywords: 'auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while'
  c99_keywords: '{{c90_keywords}}|inline|restrict|_Bool|_Complex|_Imaginary'
  c11_keywords: '{{c99_keywords}}|_Alignas|_Alignof|_Atomic|_Generic|_Noreturn|_Static_assert|_Thread_local'
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  identifier_lookahead: '(?=\b[[:alpha:]_])'
  basic_types: 'void|char|short|int|long|float|double|signed|unsigned|_Bool|_Complex|_Imaginary'
  int_types: 'u?int(8|16|32|64|128)_t'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|return|switch|while'
  storage_classes: 'static|extern|auto|register'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  preprocessors: 'if|ifdef|ifndef|else|endif|define|include|pragma'
  compiler_macros: '__asm__|__volatile__|__attribute__'
  non_storage_keywords: 'auto|break|case|continue|default|do|else|for|goto|if|return|sizeof|switch|union|while|_Alignas|_Alignof|_Atomic|_Generic|_Noreturn|_Static_assert|_Thread_local|{{compiler_macros}}'
  non_modifier_keywords: 'auto|break|case|char|continue|default|do|double|else|enum|float|for|goto|if|int|long|return|short|signed|sizeof|struct|switch|typedef|union|unsigned|void|while|_Alignas|_Alignof|_Atomic|_Generic|_Noreturn|_Static_assert|_Thread_local|{{compiler_macros}}'

contexts:

# prototypes

  prototype:
    - include: comments

  main:
    - include: global

  global:
    - include: preprocessors
    - include: typedef_declaration
    - include: non_storage_keywords
    - include: strong_declaration
    - include: statement_group
    - include: expressions
    - scope: punctuation
      match: ';'
    - scope: punctuation.unmatched
      match: '\}'

# preprocessors

  preprocessors:
    - scope: punctuation
      match: '^\s*#'
      with_prototype:
        - include: inline_escape
      push:
        - scope: meta.preprocessor.incomplete.c
          match: '\bi(nc?)?\b\s*'
        - scope: keyword
          match: \b(include)\b
          set:
            - scope: punctuation
              match: '"'
              set: string_content
              with_prototype:
                - scope: punctuation
                  match: '"'
                  pop: true
            - scope: punctuation
              match: '<'
              set: string_content
              with_prototype:
                - scope: punctuation
                  match: '>'
                  pop: true
        - scope: keyword
          match: \b(define)\b
          set: [preprocessor_expressions, after_macro_define, define_identifier]
        - scope: keyword
          match: \b({{preprocessors}})\b

# modules

  statements:
    - include: typedef_declaration
    - include: declaration
    - scope: storage.modifier
      match: '\b(?:{{modifiers}})\b'
    - scope: keyword
      match: '\b(?:{{control_keywords}})\b'
    - include: expressions

  statement_group:
    - scope: punctuation.begin
      match: '\{'
      push:
        - scope: punctuation.end
          match: '\}'
          pop: true
        - include: statement_group
        - include: preprocessors
        - include: statements

  expressions:
    - include: punctuations
    - scope: keyword
      match: '[+\-*/=!%\^&|:?><~]'
    - include: types
    - scope: keyword.other
      match: '\b(?:{{c11_keywords}}|{{compiler_macros}})\b'
    - include: constants
    - include: strings
    - include: numbers
    - match: '(?={{identifier}}\s*\()'
      push:
        - include: scope:source.c#c99
        - scope: variable.function
          match: '{{identifier}}'
        - include: easy_pop

  punctuations:
    - scope: punctuation
      match: '[\(\)\[\]\{\},;.]'
    - scope: punctuation
      match: '->|<:|:>|<%|%>'

  strings:
    - include: scope:source.c#strings

  numbers:
    - include: scope:source.c#numbers

  constants:
    - scope: constant.language.c
      match: \b(NULL|true|false|TRUE|FALSE)\b

  non_storage_keywords:
    - scope: keyword.other
      match: '\b(?:{{non_storage_keywords}})\b'

  comments:
    - scope: comment.block.c
      match: ^/\* =(\s*.*?)\s*= \*/$\n?
      captures:
        1: meta.toc-list.banner.block.c
    - scope: punctuation.definition.comment.c
      match: /\*
      push:
        - meta_scope: comment.block.c
        - scope: punctuation.definition.comment.c
          match: \*/
          pop: true
    - scope: invalid.illegal.stray-comment-end.c
      match: \*/(?!\*)
    - scope: comment.line.banner.c
      match: ^// =(\s*.*?)\s*=\s*$\n?
      captures:
        1: meta.toc-list.banner.line.c
    - scope: punctuation.definition.comment.c
      match: //
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: (?=\n)
          pop: true

  declaration:
    - match: '(?=\b({{modifiers}}|{{basic_types}}|{{int_types}}|struct|union)\b)'
      push: [declarator_comma, after_declarator_context, declarator_context, type_context]
  
  strong_declaration:
    - match: '{{identifier_lookahead}}'
      push: [declarator_comma, after_declarator_context, declarator_context, type_context]

  typedef_declaration:
    - scope: keyword
      match: '\b(typedef)\b'
      push: [typedef_declarator_comma, after_declarator_context, typedef_declarator_context, type_context]

  types:
    - match: '(?=\b({{modifiers}}|{{basic_types}}|{{int_types}}|struct|union)\b)'
      push: type_context

# components

  string_content:
    - meta_scope: string
    - meta_include_prototype: false

  preprocessor_expressions:
    - meta_scope: meta.inline
    - include: statements

  basic_types:
    - scope: keyword
      match: '\b(?:{{modifiers}})\b'
    - scope: storage.type
      match: '\b(?:{{basic_types}}|{{int_types}})\b'
      set: after_typename
    - scope: storage.type
      match: '\b(struct|union)\b'
      set: [after_typename, structlike_block, structlike_tag]

  type_modifiers:
    - scope: storage
      match: '\*'
    - scope: keyword
      match: '\b(?:{{modifiers}})\b'

  parameter_group:
    - scope: punctuation
      match: '\((?=.+\)\s*;)'
      set: param_context
    - scope: punctuation
      match: '\('
      set: universal_param_context
    - include: easy_pop

  simple_parameter_group:
    - scope: punctuation
      match: '\('
      set: simple_param_context
    - include: easy_pop

# contexts

  easy_pop:
    - match: '(?=\S)'
      pop: true

  # types

  structlike_tag:
    - match: '(?={{c11_keywords}})'
      pop: true
    - scope: meta.tag
      match: '{{identifier}}(?=\s*[^\s\{])'
      pop: true
    - scope: entity.name.struct
      match: '{{identifier}}'
      pop: true
    - include: easy_pop

  type_context:
    - include: basic_types
    - match: '(?={{non_storage_keywords}})'
      pop: true
    - scope: meta.storage
      match: '{{identifier}}(?!\s*[,;\)])'
      set: after_typename
    - include: easy_pop

  strong_type_context:
    - include: basic_types
    - match: '(?={{non_storage_keywords}})'
      pop: true
    - scope: meta.storage.maybe
      match: '{{identifier}}'
      set: after_typename
    - include: easy_pop

  after_typename:
    - include: type_modifiers
    - scope: storage.type
      match: '\b(?:{{basic_types}}|{{int_types}})\b'
    - include: easy_pop

  structlike_block:
    - scope: punctuation.begin
      match: '\{'
      set:
        - scope: punctuation.end
          match: '\}'
          pop: true
        - include: strong_declaration
        - scope: punctuation
          match: ';'
    - include: easy_pop

  declarator_context:
    - match: '(?={{non_modifier_keywords}})'
      pop: true
    - match: '{{identifier}}(?=\s*\()'
      scope: entity.name.function
      set: after_function_declarator_context
    - match: '{{identifier}}'
      scope: entity.name
      pop: true
    - scope: punctuation.declarator
      match: '\('
      set: [after_declarator_context, declarator_parentheses_context]
    - include: easy_pop

  typedef_declarator_context:
    - match: '(?={{non_storage_keywords}})'
      pop: true
    - scope: entity.name.type
      match: '{{identifier}}'
      pop: true
    - scope: punctuation.declarator
      match: '\('
      set: [after_declarator_context, typedef_declarator_parentheses_context]
    - include: easy_pop

  param_declarator_context:
    - scope: variable.parameter
      match: '{{identifier}}'
      pop: true
    - scope: punctuation.declarator
      match: '\('
      set: [after_declarator_context, param_declarator_parentheses_context]
    - include: easy_pop

  param_declarator_context_fake:
    - scope: variable.fake_parameter
      match: '{{identifier}}'
      pop: true
    - scope: punctuation.declarator
      match: '\('
      set: [after_declarator_context, param_declarator_parentheses_context]
    - include: easy_pop

  declarator_parentheses_context:
    - include: type_modifiers
    - scope: punctuation.declarator
      match: '\)'
      pop: true
    - scope: punctuation.declarator
      match: '\('
      push: [after_declarator_context, declarator_parentheses_context]
    - match: '(?={{non_modifier_keywords}})'
      pop: true
    - match: '{{identifier}}(?=\s*\()'
      scope: entity.name.function
      push: [after_declarator_context, after_function_declarator_context]
    - match: '{{identifier}}'
      scope: entity.name
      push: after_declarator_context
    - match: '(?=\S)'
      set: expression_group_context

  typedef_declarator_parentheses_context:
    - include: type_modifiers
    - scope: punctuation.declarator
      match: '\)'
      pop: true
    - scope: punctuation.declarator
      match: '\('
      push: [after_declarator_context, typedef_declarator_parentheses_context]
    - scope: entity.name.type
      match: '{{identifier}}'
      push: after_declarator_context

  param_declarator_parentheses_context:
    - include: type_modifiers
    - scope: punctuation.declarator
      match: '\)'
      pop: true
    - scope: punctuation.declarator
      match: '\('
      push: [after_declarator_context, param_declarator_parentheses_context]
    - scope: variable.parameter
      match: '{{identifier}}'
      push: after_declarator_context
    - match: '(?=\S)'
      set: expression_group_context

  after_declarator_context:
    - scope: punctuation
      match: '\['
      set: [after_declarator_context, bracket_context]
    - scope: punctuation
      match: '\('
      set: [after_declarator_context, simple_param_context]
    - include: easy_pop

  after_function_declarator_context:
    - scope: punctuation
      match: '\((?=[\s[:alnum:]_,\*\/]+(\)[\s\*\/]*([[:alnum:]_]|\{|$)|$))'
      set: [after_declarator_context, universal_param_context]
    - scope: punctuation
      match: '\(' # match: '\((?=.*[^\s[:alnum:]_,].*\)[^\{]*(\{|$))'
      set: [after_declarator_context, param_context]
    - include: easy_pop

  bracket_context:
    - scope: punctuation.end
      match: '\]'
      pop: true
    - scope: punctuation.begin
      match: '\['
      push: bracket_context
    - include: expressions

  expression_group_context:
    - scope: punctuation.end
      match: '\)'
      pop: true
    - scope: punctuation.begin
      match: '\('
      push: expression_group_context
    - include: expressions

  declarator_comma:
    - scope: punctuation
      match: ','
      set: [declarator_comma, after_declarator_context, declarator_context]
    - include: easy_pop

  typedef_declarator_comma:
    - scope: punctuation
      match: ','
      set: [typedef_declarator_comma, after_declarator_context, typedef_declarator_context]
    - include: easy_pop

  param_context:
    - meta_scope: meta.param
    - scope: keyword.punctuation
      match: '\.\.\.'
    - scope: punctuation
      match: ','
    - scope: punctuation
      match: '\)'
      pop: true
    - match: '{{identifier_lookahead}}'
      set: [param_context, after_declarator_context, param_declarator_context, strong_type_context]

  universal_param_context:
    - meta_scope: meta.param.universal
    - scope: punctuation
      match: ','
    - scope: punctuation
      match: '\)'
      pop: true
    - match: '(?=\b({{modifiers}}|{{basic_types}}|{{int_types}}|struct|union)\b)'
      set: [param_context, after_declarator_context, param_declarator_context, strong_type_context]
    - match: '(?={{identifier}}\s*[\*[:alnum:]])'
      set: [param_context, after_declarator_context, param_declarator_context, strong_type_context]
    - scope: variable.parameter
      match: '{{identifier}}'

  simple_param_context:
    - meta_scope: meta.param
    - scope: punctuation
      match: ','
    - scope: punctuation
      match: '\)'
      pop: true
    - match: '{{identifier_lookahead}}'
      set: [simple_param_context, after_declarator_context, param_declarator_context_fake, strong_type_context]

  # preprocessors

  inline_escape:
    - scope: punctuation
      match: '\\\n'
    - match: '(?=\n)'
      pop: true

  macro_parameter_group:
    - scope: punctuation
      match: '\('
      with_prototype:
        - scope: punctuation
          match: '\)'
          pop: true
      set: macro_param_content

  macro_param_content:
    - scope: punctuation
      match: ','
    - scope: variable.parameter
      match: '{{identifier}}'

  define_identifier:
    - match: '{{identifier}}(?=\()'
      scope: entity.name.function.macro
      pop: true
    - match: '{{identifier}}'
      scope: identifier
      pop: true
    - include: easy_pop

  after_macro_define:
    - match: '(?=\()'
      set: macro_parameter_group
    - match: '\s+'
      pop: true

