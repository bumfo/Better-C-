%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C99
file_extensions:
  - c
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.c99

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  microsoft_types: '__int8|__int16|__int32|__int64'
  windows_types: 'APIENTRY|ATOM|BOOL|BOOLEAN|BYTE|CALLBACK|CCHAR|CHAR|COLORREF|CONST|DWORD|DWORDLONG|DWORD_PTR|DWORD32|DWORD64|FLOAT|HACCEL|HALF_PTR|HANDLE|HBITMAP|HBRUSH|HCOLORSPACE|HCONV|HCONVLIST|HCURSOR|HDC|HDDEDATA|HDESK|HDROP|HDWP|HENHMETAFILE|HFILE|HFONT|HGDIOBJ|HGLOBAL|HHOOK|HICON|HINSTANCE|HKEY|HKL|HLOCAL|HMENU|HMETAFILE|HMODULE|HMONITOR|HPALETTE|HPEN|HRESULT|HRGN|HRSRC|HSZ|HWINSTA|HWND|INT|INT_PTR|INT8|INT16|INT32|INT64|LANGID|LCID|LCTYPE|LGRPID|LONG|LONGLONG|LONG_PTR|LONG32|LONG64|LPARAM|LPBOOL|LPBYTE|LPCOLORREF|LPCSTR|LPCTSTR|LPCVOID|LPCWSTR|LPDWORD|LPHANDLE|LPINT|LPLONG|LPSTR|LPTSTR|LPVOID|LPWORD|LPWSTR|LRESULT|PBOOL|PBOOLEAN|PBYTE|PCHAR|PCSTR|PCTSTR|PCWSTR|PDWORD|PDWORDLONG|PDWORD_PTR|PDWORD32|PDWORD64|PFLOAT|PHALF_PTR|PHANDLE|PHKEY|PINT|PINT_PTR|PINT8|PINT16|PINT32|PINT64|PLCID|PLONG|PLONGLONG|PLONG_PTR|PLONG32|PLONG64|POINTER_32|POINTER_64|POINTER_SIGNED|POINTER_UNSIGNED|PSHORT|PSIZE_T|PSSIZE_T|PSTR|PTBYTE|PTCHAR|PTSTR|PUCHAR|PUHALF_PTR|PUINT|PUINT_PTR|PUINT8|PUINT16|PUINT32|PUINT64|PULONG|PULONGLONG|PULONG_PTR|PULONG32|PULONG64|PUSHORT|PVOID|PWCHAR|PWORD|PWSTR|QWORD|SC_HANDLE|SC_LOCK|SERVICE_STATUS_HANDLE|SHORT|SIZE_T|SSIZE_T|TBYTE|TCHAR|UCHAR|UHALF_PTR|UINT|UINT_PTR|UINT8|UINT16|UINT32|UINT64|ULONG|ULONGLONG|ULONG_PTR|ULONG32|ULONG64|UNICODE_STRING|USHORT|USN|VOID|WCHAR|WINAPI|WORD'
  stdint: 'int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'decltype|sizeof|__declspec|__attribute__'
  pop_on_keywords: '\b({{basic_types}}|{{control_keywords}}|{{before_tag}}|{{modifiers}})\b'
  general_pop: '\S'
  inline_general_pop: '\S|\n'
  statement_pop: '[)\]};]'
  expression_pop: '{{statement_pop}}|,'
  identifier_pop: '{{expression_pop}}|[{=]'
  variable_declaration_lookahead: '\b({{basic_types}})\b|\b({{before_tag}})\b\s+({{identifier}})'

contexts:
  main:
    - include: global

  global:
    - include: variable-declaration
    - include: typedef
    - include: preprocessor
    - include: comments
    - include: global-block
    - match: ';'
      scope: punctuation.terminator.c

  typedef:
    - match: \btypedef\b
      scope: keyword.typedef.c

  statement:
    - include: for-statement
    - include: typedef
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c
    - include: variable-declaration
    - include: preprocessor
    - include: comments
    - include: block
    - include: expression
    - match: ';'
      scope: punctuation.terminator.c

  global-block:
    - match: \{
      scope: punctuation.definition.block.begin.c
      push:
        - meta_content_scope: meta.global-block.c
        - include: statement
        - match: \}
          scope: punctuation.definition.block.end.c
          pop: true

  block:
    - match: \{
      scope: punctuation.definition.block.begin.c
      push:
        - include: statement
        - match: \}
          scope: punctuation.definition.block.end.c
          pop: true

  variable-declaration:
    - match: '\b({{basic_types}})\b'
      scope: storage.type.c
      push: inner-variable-declaration
    - match: '\b({{before_tag}})\b\s+({{identifier}})'
      captures: 
        1: storage.type.struct.c
        2: meta.struct-name.c
      push: inner-variable-declaration

  for-statement:
    - match: \b(for)\b
      scope: keyword.control.for.c
      push: 
        - meta_content_scope: meta.for-statement.c
        - match: \(
          scope: punctuation.definition.group.begin.c
          push: 
            - meta_content_scope: meta.for-group.c
            - match: ';'
              scope: punctuation.terminator.c
            - match: '(?={{variable_declaration_lookahead}})'
              push: 
                - match: (?={{general_pop}})
                  pop: true
                - include: variable-declaration
            - match: \)
              scope: punctuation.definition.group.end.c
              pop: true
            - include: expression
        - match: (?={{general_pop}})
          pop: true

  general-expression:
    - include: operators
    - include: number
    - include: string
    - match: \bsizeof\b
      scope: keyword.operator.sizeof.c
    - match: \b({{basic_types}})\b
      scope: storage.type.basic.c
    - include: constants
    - match: '{{identifier}}(?=\s*\()'
      scope: variable.function.c
    - match: ','
      scope: punctuation.separator.c

  expression:
    - match: '\\\n'
      scope: punctuation.escape.line-break.c
    - include: comments
    - include: general-expression
    - include: group
    - include: subscriptor

  group:
    - match: \(
      scope: punctuation.definition.group.begin.c
      push:
        - include: expression
        - match: \)
          scope: punctuation.definition.group.end.c
          pop: true

  string:
    - include: scope:source.c#strings
    # - match: '"'
    #   scope: punctuation.definition.string.begin.c
    #   push:
    #     - meta_scope: string.quoted.double.c
    #     - match: '\n'
    #       scope: invalid.illegal.line-break.c
    #       pop: true
    #     - match: \\.|\\\n
    #       scope: constant.character.escape.c
    #     - match: '"'
    #       scope: punctuation.definition.string.end.c
    #       pop: true
    # - match: "'"
    #   scope: punctuation.definition.string.begin.c
    #   push:
    #     - meta_scope: string.quoted.single.c
    #     - match: '\n'
    #       scope: invalid.illegal.line-break.c
    #       pop: true
    #     - match: \\.|\\\n
    #       scope: constant.character.escape.c
    #     - match: "'"
    #       scope: punctuation.definition.string.end.c
    #       pop: true

  number:
    - include: scope:source.c#numbers
    # - match: '[0-9]+'
    #   scope: constant.numeric.c

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE)\b
      scope: constant.language.c
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.c
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.c
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.c

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: \n
          pop: true

  operators:
    - match: '->'
      scope: punctuation.accessor.c
    - match: '\.'
      scope: punctuation.accessor.c
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.c
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c
    - match: \+|\-|/|%|<<|>>|&&|\|\||\||\^|~|!
      scope: keyword.operator.arithmetic.c
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.c
    - match: \=
      scope: keyword.operator.assignment.c
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.c
    - match: '\.\.\.'
      scope: punctuation.definition.variadic.c

  subscriptor:
    - match: '\['
      scope: punctuation.subscriptor.begin.c
      push:
        - include: expression
        - match: '\]'
          scope: punctuation.subscriptor.end.c
          pop: true

  inline-statement:
    - match: ';'
      scope: punctuation.terminator.c
    - include: inline-for-statement
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c
    - include: inline-variable-declaration
    - include: inline-block
    - include: inline-expression

  inline-block:
    - match: \{
      scope: punctuation.definition.block.begin.c
      push:
        - meta_content_scope: meta.block.inline.c
        - include: inline-statement
        - match: \}
          scope: punctuation.definition.block.end.c
          pop: true

  inline-variable-declaration:
    - match: '\b({{basic_types}})\b'
      scope: storage.type.c
      push: inline-inner-variable-declaration
    - match: '\b({{before_tag}})\b\s+({{identifier}})'
      captures: 
        1: storage.type.struct.c
        2: meta.struct-name.c
      push: inline-inner-variable-declaration

  inline-for-statement:
    - match: \b(for)\b
      scope: keyword.control.for.c
      push: 
        - meta_content_scope: meta.for-statement.inline.c
        - match: \(
          scope: punctuation.definition.group.begin.c
          push: 
            - meta_content_scope: meta.for-group.inline.c
            - match: \)
              scope: punctuation.definition.group.end.c
              pop: true
            - include: inline-linebreak-special-case
            - match: ';'
              scope: punctuation.terminator.c
            - match: '(?={{variable_declaration_lookahead}})'
              push: 
                - match: '(?={{inline_general_pop}})'
                  pop: true
                - include: inline-variable-declaration
            - include: inline-expression
        - match: '(?={{inline_general_pop}})'
          pop: true

  inline-linebreak-special-case:
    - match: '\\\n'
      scope: punctuation.escape.line-break.c
    - match: '(?=\n)'
      pop: true

  inline-expression:
    - include: inline-comments
    - include: inline-linebreak-special-case
    - include: general-expression
    - include: inline-group
    - include: inline-subscriptor

  inline-group:
    - match: \(
      scope: punctuation.definition.group.begin.c
      push:
        - meta_content_scope: meta.group.inline.c
        - include: inline-expression
        - match: \)
          scope: punctuation.definition.group.end.c
          pop: true

  inline-subscriptor:
    - match: '\['
      scope: punctuation.subscriptor.begin.c
      push:
        - meta_content_scope: meta.subscriptor.inline.c
        - include: inline-expression
        - match: '\]'
          scope: punctuation.subscriptor.end.c
          pop: true

  inline-comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.inline.c
      captures:
        1: meta.toc-list.banner.block.c
    - match: /\*
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.inline.c
        - include: inline-linebreak-special-case
        - match: \*/
          scope: punctuation.definition.comment.c
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.c
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.c
      captures:
        1: meta.toc-list.banner.line.c
    - match: //
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.line.double-slash.c
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.c
        - match: \n
          pop: true

  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.c

  preprocessor-macro-define:
    - match: '^\s*#define\b'
      scope: keyword.preprocessor.define.c
      push:
        - match: (?=\n)
          pop: true
        - match: '{{identifier}}'
          set:
            - meta_content_scope: meta.preprocessor.define.c meta.inline.c
            - match: (?=\n)
              pop: true
            - include: inline-statement

  preprocessor-include:
    - match: '^\s*#include\s*'
      scope: keyword.preprocessor.c
      push:
        - meta_scope: meta.preprocessor.c
        - match: '"'
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.double.include.c
            - match: '"'
              scope: punctuation.definition.string.end.c
              pop: true
        - match: '<'
          scope: punctuation.definition.string.begin.c
          push:
            - meta_scope: string.quoted.other.lt-gt.include.c
            - match: '>'
              scope: punctuation.definition.string.end.c
              pop: true
        - match: (?=\n)
          pop: true

  preprocessor:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: preprocessor-include
    - match: '^\s*(#(?>ifdef|define|undef|e(?>l(?>se|if)|ndif)))'
      scope: keyword.preprocessor.c
      push:
        - meta_scope: meta.preprocessor.c
        - match: (?=\n)
          pop: true

  plain-group:
    - match: '\('
      push: 
        - include: plain-group
        - match: '\)'
          pop: true

  parameter-group:
    - match: '\('
      scope: punctuation.definition.parameters.begin.c
      push: 
        - meta_content_scope: meta.definition.parameters.c
        - match: '\)'
          scope: punctuation.definition.parameters.end.c
          pop: true
        - match: ','
          scope: punctuation.separator.c
        - match: \b({{basic_types}})\b
          scope: storage.type.c
        - match: '\*'
          scope: storage.type.pointer.c
        - include: complex-declaration-parameter
        - match: '({{identifier}})(?=\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c
            2: variable.parameter.c
          push: 
            - include: subscriptor
            - include: parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  parameter-group-fake:
    - match: '\('
      scope: punctuation.definition.parameters.begin.c
      push: 
        - meta_content_scope: meta.definition.parameters.fake.c
        - match: '\)'
          scope: punctuation.definition.parameters.end.c
          pop: true
        - match: ','
          scope: punctuation.separator.c
        - match: \b({{basic_types}})\b
          scope: storage.type.c
        - match: '\*'
          scope: storage.type.pointer.c
        - include: complex-declaration-fake
        - match: '({{identifier}})(?=\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c comment.parameter.c
            2: variable.parameter.c comment.parameter.c
          push: 
            - include: subscriptor
            - include: parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  inline-parameter-group:
    - match: '\('
      scope: punctuation.definition.parameters.begin.c
      push: 
        - meta_content_scope: meta.definition.parameters.inline.c
        - match: '\)'
          scope: punctuation.definition.parameters.end.c
          pop: true
        - include: inline-linebreak-special-case
        - match: ','
          scope: punctuation.separator.c
        - match: \b({{basic_types}})\b
          scope: storage.type.c
        - match: '\*'
          scope: storage.type.pointer.c
        - include: inline-complex-declaration-parameter
        - match: '({{identifier}})(?=\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c
            2: variable.parameter.c
          push: 
            - include: inline-subscriptor
            - include: inline-parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  inline-parameter-group-fake:
    - match: '\('
      scope: punctuation.definition.parameters.begin.c
      push: 
        - meta_content_scope: meta.definition.parameters.fake.inline.c
        - match: '\)'
          scope: punctuation.definition.parameters.end.c
          pop: true
        - include: inline-linebreak-special-case
        - match: ','
          scope: punctuation.separator.c
        - match: \b({{basic_types}})\b
          scope: storage.type.c
        - match: '\*'
          scope: storage.type.pointer.c
        - include: inline-complex-declaration-fake
        - match: '({{identifier}})(?=\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c comment.parameter.c
            2: variable.parameter.c comment.parameter.c
          push: 
            - include: inline-subscriptor
            - include: inline-parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  complex-declaration:
    - match: '\('
      scope: punctuation.declaration.group.begin.c
      push: 
        - meta_content_scope: meta.complex-declaration.c
        - include: comments
        - match: '\*'
          scope: storage.type.pointer.c
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.declaration.c
            2: variable.declaration.c
        - match: '\)'
          scope: punctuation.declaration.group.end.c
          set: 
            - include: comments
            - include: subscriptor
            - include: parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  complex-declaration-parameter:
    - match: '\('
      scope: punctuation.declaration.group.begin.c
      push: 
        - meta_content_scope: meta.complex-declaration-parameter.c
        - include: comments
        - match: '\*'
          scope: storage.type.pointer.c
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c
            2: variable.parameter.c
        - match: '\)'
          scope: punctuation.declaration.group.end.c
          set: 
            - include: comments
            - include: subscriptor
            - include: parameter-group-fake
            - match: (?={{general_pop}})
              pop: true
  
  complex-declaration-fake:
    - match: '\('
      scope: punctuation.declaration.group.begin.c
      push: 
        - meta_content_scope: meta.complex-declaration-fake.c
        - include: comments
        - match: '\*'
          scope: storage.type.pointer.c
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c comment.parameter.c
            2: variable.parameter.c comment.parameter.c
        - match: '\)'
          scope: punctuation.declaration.group.end.c
          set: 
            - include: comments
            - include: subscriptor
            - include: parameter-group-fake
            - match: (?={{general_pop}})
              pop: true
  
  inline-complex-declaration:
    - match: '\('
      scope: punctuation.declaration.group.begin.c
      push: 
        - meta_content_scope: meta.complex-declaration.inline.c
        - include: inline-comments
        - match: '\*'
          scope: storage.type.pointer.c
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.declaration.c
            2: variable.declaration.c
        - match: '\)'
          scope: punctuation.declaration.group.end.c
          set: 
            - include: inline-comments
            - include: inline-subscriptor
            - include: inline-parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  inline-complex-declaration-parameter:
    - match: '\('
      scope: punctuation.declaration.group.begin.c
      push: 
        - meta_content_scope: meta.complex-declaration-parameter.inline.c
        - include: inline-comments
        - match: '\*'
          scope: storage.type.pointer.c
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c
            2: variable.parameter.c
        - match: '\)'
          scope: punctuation.declaration.group.end.c
          set: 
            - include: inline-comments
            - include: inline-subscriptor
            - include: inline-parameter-group-fake
            - match: (?={{general_pop}})
              pop: true
  
  inline-complex-declaration-fake:
    - match: '\('
      scope: punctuation.declaration.group.begin.c
      push: 
        - meta_content_scope: meta.complex-declaration-fake.inline.c
        - include: inline-comments
        - match: '\*'
          scope: storage.type.pointer.c
        - match: '({{identifier}})(?=\s*\)\s*\()|({{identifier}})'
          captures:
            1: variable.parameter.c comment.parameter.c
            2: variable.parameter.c comment.parameter.c
        - match: '\)'
          scope: punctuation.declaration.group.end.c
          set: 
            - include: inline-comments
            - include: inline-subscriptor
            - include: inline-parameter-group-fake
            - match: (?={{general_pop}})
              pop: true

  inner-variable-declaration:
    - meta_content_scope: meta.variable-declaration.c
    - match: ','
      scope: punctuation.separator.c
    - match: '(?={{pop_on_keywords}})'
      pop: true
    - match: '({{identifier}})(?=\s*\()|({{identifier}})'
      captures:
        1: entity.name.function.c
        2: variable.declaration.c
      push: 
        - meta_content_scope: meta.identifier-match
        - include: subscriptor
        - include: parameter-group
        - match: (?={{general_pop}})
          pop: true
    - include: complex-declaration
    - match: '\*'
      scope: storage.type.pointer.c
    - match: '='
      scope: punctuation.initialize.c
      push:
        - match: (?={{statement_pop}}|,)
          pop: true
        - include: expression
    - include: comments
    - match: '(?={{general_pop}})'
      pop: true
  
  inline-inner-variable-declaration:
    - meta_content_scope: meta.variable-declaration.inline.c
    - match: ','
      scope: punctuation.separator.c
    - match: '(?={{pop_on_keywords}})'
      pop: true
    - match: '({{identifier}})(?=\s*\()|({{identifier}})'
      captures:
        1: entity.name.function.c
        2: variable.declaration.c
      push: 
        - meta_content_scope: meta.identifier-match
        - include: inline-subscriptor
        - include: inline-parameter-group
        - match: '(?={{inline_general_pop}})'
          pop: true
    - include: inline-complex-declaration
    - match: '\*'
      scope: storage.type.pointer.c
    - match: '='
      scope: punctuation.initialize.c
      push:
        - match: (?={{statement_pop}}|,)
          pop: true
        - include: inline-expression
    - include: inline-comments
    - match: '(?={{inline_general_pop}})'
      pop: true

  data-structure:
    - match: \{
      push:
        - match: \}
          pop: true

  struct-maybe: 
    - match: '\b{{before_tag}}\b'
      push:
        - match: (?=\{)
          set: data-structure
        - include: inner-variable-declaration

